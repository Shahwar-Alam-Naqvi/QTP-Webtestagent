import re
import json
import logging
from xml.etree import ElementTree as ET
from claudetools.extract.single import extractUsingRegEx

logger = logging.getLogger(__name__)


def extractMultipleFunctions(output_text: str):
    """
    Extracts multiple function calls from the provided output text.

    This function looks for an XML-like pattern (<multiplefunctions>) within
    the given output text, parses it to extract all <functioncall> elements,
    and returns their JSON content as a list of dictionaries.

    Args:
        output_text (str): The text containing the multiple function calls
                           within <multiplefunctions> tags.

    Returns:
        List[Dict]: A list of dictionaries containing the JSON data of each
                    function call.
                    Returns None if no matches are found or if there is a
                    parsing error.

    Logs:
        - Information about the match found for the multiple function calls.
        - The XML string containing multiple function calls.
        - All found <functioncall> elements.

    Exceptions:
        - If there is an xml.etree.ElementTree.ParseError,
          the function attempts to extract function calls using
          `extractUsingRegEx`.
    """
    try:
        pattern = r"(<multiplefunctions>(.*?)</multiplefunctions>)"
        match = re.search(pattern, output_text, re.DOTALL)
        logging.info(f"Multiple Function Match: {match}")
        if not match:
            return None
        multiplefn = match.group(1)
        logging.info(f"Multiple Functions Group: {multiplefn}")
        root = ET.fromstring(multiplefn)
        functions = root.findall("functioncall")
        logging.info(f"All Function Calls: {functions}")
        return [json.loads(fn.text) for fn in functions]
    except ET.ParseError:
        return extractUsingRegEx(output_text)
